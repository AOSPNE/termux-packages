--- qt-everywhere-src-6.0.1/qtbase/src/network/ssl/qsslsocket_openssl_symbols.cpp	2021-01-26 18:29:22.000000000 +0000
+++ qt-everywhere-src-6.0.1.mod/qtbase/src/network/ssl/qsslsocket_openssl_symbols.cpp	2021-02-21 02:01:56.996794457 +0000
@@ -69,7 +69,7 @@
 #endif
 #include <QtCore/private/qmemory_p.h>
 #include <QtCore/private/qduplicatetracker_p.h>
-#if defined(Q_OS_LINUX) && !defined(Q_OS_ANDROID)
+#if defined(Q_OS_LINUX) && !defined(Q_OS_ANDROID) || defined(Q_OS_TERMUX)
 #include <link.h>
 #endif
 #ifdef Q_OS_DARWIN
@@ -568,7 +568,7 @@
     }
 };
 
-#if defined(Q_OS_LINUX) && !defined(Q_OS_ANDROID)
+#if defined(Q_OS_LINUX) && !defined(Q_OS_ANDROID) || defined(Q_OS_TERMUX)
 static int dlIterateCallback(struct dl_phdr_info *info, size_t size, void *data)
 {
     if (size < sizeof (info->dlpi_addr) + sizeof (info->dlpi_name))
@@ -604,13 +604,17 @@
     paths = QString::fromLatin1(qgetenv("LD_LIBRARY_PATH"))
             .split(QLatin1Char(':'), Qt::SkipEmptyParts);
 #  endif
+
     paths << QLatin1String("/lib") << QLatin1String("/usr/lib") << QLatin1String("/usr/local/lib");
     paths << QLatin1String("/lib64") << QLatin1String("/usr/lib64") << QLatin1String("/usr/local/lib64");
     paths << QLatin1String("/lib32") << QLatin1String("/usr/lib32") << QLatin1String("/usr/local/lib32");
 
+#ifdef Q_OS_TERMUX
+    paths << QLatin1String("/data/data/com.termux/files/usr/lib")
+#endif
 #if defined(Q_OS_ANDROID)
     paths << QLatin1String("/system/lib");
-#elif defined(Q_OS_LINUX)
+#elif defined(Q_OS_LINUX) || defined(Q_OS_TERMUX)
     // discover paths of already loaded libraries
     QDuplicateTracker<QString> loadedPaths;
     dl_iterate_phdr(dlIterateCallback, &loadedPaths);
@@ -766,7 +770,7 @@
     //  macOS's /usr/lib/libssl.dylib, /usr/lib/libcrypto.dylib will be picked up in the third
     //    attempt, _after_ <bundle>/Contents/Frameworks has been searched.
     //  iOS does not ship a system libssl.dylib, libcrypto.dylib in the first place.
-# if defined(Q_OS_ANDROID)
+# if defined(Q_OS_ANDROID) && !defined(Q_OS_TERMUX)
     // OpenSSL 1.1.x must be suffixed otherwise it will use the system libcrypto.so libssl.so which on API-21 are OpenSSL 1.0 not 1.1
     auto openSSLSuffix = [](const QByteArray &defaultSuffix = {}) {
         auto suffix = qgetenv("ANDROID_OPENSSL_SUFFIX");
